@page "/dashchart"
@rendermode InteractiveServer

<h3>DashChart</h3>
<head> 
    <script src="/lib/chart.js"></script>
    <script>
        function drawChart(labels, data)
        {
        console.log("Draw chart being called.");
        var ctx = document.getElementById('myChart').getContext('2d');
        new Chart(ctx,
        {
        type: 'line',
        data:
        {
        labels: labels,
        datasets:
        [
        {
        label: 'Sample Data',
        data: data,
        borderColor: 'rgba(75, 192, 192, 1)',
        backgroundColor: 'rgba(75, 192, 192, 0.2)',
        borderWidth: 1
        }
        ]
        },
        options: { scales: { y: { beginAtZero: true } } }
        }
        );
        }
    </script>
</head>
<div id="Chart">
    <canvas id="myChart" width="400" height="200"></canvas>
    <button class=" btn btn-primary" @onclick="OnPreviousBtnClick">Previous</button>
    <button class=" btn btn-primary" @onclick="OnNextBtnClick">Next</button>
</div>


@code {
    @using Database;

    [Inject]
    IJSRuntime JS { get; set; }

    private List<Device> devices = new List<Device>();

    public List<bool> status = new List<bool>();
    public List<DateTime> statusTime = new List<DateTime>();

    int windowStart = 0;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Initialized called");

        Database.DatabaseManager dbManager = new Database.DatabaseManager();
        List<Device> devices2 = new List<Device>();
        dbManager.GetData(ref devices, ref devices2);

        if (devices.Count <=60)
        {
            throw new Exception("Minimum number of data points are not present");
        }

        PopulateChartData();
    }

    private void PopulateChartData()
    {
        status.Clear();
        statusTime.Clear();
        for (int i = windowStart; i < windowStart + 60; i++)
        {
            var dev = devices[i];
            status.Add(dev.Status);
            statusTime.Add(dev.StatusTime);
        }
    }

    private void OnNextBtnClick()
    {
        Console.WriteLine("Next button clicked");
        windowStart += 10;
        if (windowStart > devices.Count - 60)
        {
            windowStart = devices.Count - 60;
        }

        PopulateChartData();
        JS.InvokeVoidAsync("drawChart", statusTime, status);
    }

    private void OnPreviousBtnClick()
    {
        Console.WriteLine("Previous button clicked");
        windowStart -= 10;
        if (windowStart < 0)
        {
            windowStart = 0;
        }
        PopulateChartData();
        JS.InvokeVoidAsync("drawChart", statusTime, status);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Console.WriteLine("After render called");

            // Trigger the JavaScript function to draw the chart
            await JS.InvokeVoidAsync("drawChart", statusTime, status);
            await base.OnAfterRenderAsync(firstRender);
        }
    }
}